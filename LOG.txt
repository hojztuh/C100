1. Basic tcp server

    1.1 server: socket->bind->listen->accept->send/recv->close

        while(true) {
            client_sock = accept();

            send/recv

            close(client_sock)
        }

    1.2 client: socket->connect->send/recv->close

2. Process requests in a loop

    server:

        client_sock = accept();

        while (true) {
            recv/send
        }

        close(client_sock);
        close(sock);

3. Send structured data

    struct DataPacket {
        char name[32];
        int age;
    };

4. Send datagram

    datagram = header + payload

    send header first and then send payload

5. Combine header and payload into datagram and send/recv onece

    struct Login: public Header {

        Login() {
            Length = sizeof(Login);
            cmd = CMD_LOGIN;
        }

        char Name[32];
        char Password[32];
    };

6. Select

    int select(int nfds, fd_set *readfds, fd_set *writefds,
                  fd_set *exceptfds, struct timeval *timeout);
    nfds: set to 1024
    readfds: applicable for accept & recv
    writefds: applicable for send
    exceptfds: applicable for exceptions
    timeout: NULL for blocked; not NULL for non-blocked

    void FD_CLR(int fd, fd_set *set);   // delete a fd
    int  FD_ISSET(int fd, fd_set *set); // check a fd
    void FD_SET(int fd, fd_set *set);   // insert a fd
    void FD_ZERO(fd_set *set);          // clear the whole set

7. Thread 

    modify client
    
    use std thread to indepently deal with command line input of the client

8. Encapsulate client

    create and implement class EasyTcpClient 

9. Encapsulate server

    create and implement class EasyTcpServer

10. Solve problems when large datagrams are transferred at high frequency 

    10.1 What problems?
    1. Receive buffer overflows so that the sender cannot send data to the receiver anymore the network will be stucked. 
    2. Since TCP is originally a protocol based one byte stream rather than message packet, at one time, you may receive
    multiple datagrams or less than one datagram. How to correctly parse the received data?

    10.2 How to solve problem 1 ? 

    ssize_t recv(int sockfd, void *buf, size_t len, int flags);
    
    Once collect more data. To be specific, make len bigger. Consequently, we can promptly empty the kernel level receive buffer.

    10.3 How to solve problem 2 in client? 

    int RecvData() {

        // int len = recv(sock, buffer, sizeof(Header), 0);    // receive header
        int len = recv(sock, RecvBuffer, RECV_BUF_SIZE, 0);
        if (len <= 0) {
            printf("Disconnected from server!\n");
            return -1;
        }

        // copy data from RecvBuffer to MsgBuffer
        memcpy(MsgBuffer + LastPos, RecvBuffer, len);
        // move poiter
        LastPos += len;

        while (LastPos >= sizeof(Header)) {
            Header *header = (Header *)MsgBuffer;
            if (LastPos >= header->Length) {    // can process one datagram
                int remain = LastPos - header->Length;
                OnNetMsg(header);   // process the current datagram
                memcpy(MsgBuffer, MsgBuffer + header->Length, remain);
                LastPos = remain;
            } else break;   // less than one datagram
        }

        return 0; 
    }

    10.4 How to solve problem 2 in server? 

    Firstly, we create and implement the class ClientSocket, which contains sockfd, msgbuffer.
    Secondly, we modify the RecvData method in class EasyTcpServer. Note that the RecvBuffer is 
    in class EasyTcpServer. 

11. Test 1000 connections & add a high precision timer

    In client.cpp we generate 1000 EasyTcpClient objects to connect the server and send data
    to it. It is proved that select model can handle 1000 connections. 

    We also add a high precision timer, which is implemented in class CELLTimestamp. Through 
    the timer, we can calculate the total nubmer of datagrams received per second. 

12. Modify client

    Use multi-threads to modify client.cpp



