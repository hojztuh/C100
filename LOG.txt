1. Basic tcp server

    1.1 server: socket->bind->listen->accept->send/recv->close

        while(true) {
            client_sock = accept();

            send/recv

            close(client_sock)
        }

    1.2 client: socket->connect->send/recv->close

2. Process requests in a loop

    server:

        client_sock = accept();

        while (true) {
            recv/send
        }

        close(client_sock);
        close(sock);

3. Send structured data

    struct DataPacket {
        char name[32];
        int age;
    };

4. Send datagram

    datagram = header + payload

    send header first and then send payload

5. Combine header and payload into datagram and send/recv onece

    struct Login: public Header {

        Login() {
            Length = sizeof(Login);
            cmd = CMD_LOGIN;
        }

        char Name[32];
        char Password[32];
    };

6. Select

    int select(int nfds, fd_set *readfds, fd_set *writefds,
                  fd_set *exceptfds, struct timeval *timeout);
    nfds: set to 1024
    readfds: applicable for accept & recv
    writefds: applicable for send
    exceptfds: applicable for exceptions
    timeout: NULL for blocked; not NULL for non-blocked

    void FD_CLR(int fd, fd_set *set);   // delete a fd
    int  FD_ISSET(int fd, fd_set *set); // check a fd
    void FD_SET(int fd, fd_set *set);   // insert a fd
    void FD_ZERO(fd_set *set);          // clear the whole set

7. Thread 

    modify client
    
    use std thread to indepently deal with command line input of the client

8. Encapsulate client

    create and implement class EasyTcpClient 

9. Encapsulate server

    create and implement class EasyTcpServer
